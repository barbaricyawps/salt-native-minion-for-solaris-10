#!/usr/bin/bash

# Copyright 2019-2022 VMware, Inc.
# SPDX-License-Identifier: Apache-2

# shellcheck disable=SC2015,SC2001,SC2034,SC2129

set -o functrace
set -o pipefail

## using bash for now, not path is for Solaris opencsw
## run this script as root

SCRIPT_VERSION='2021.03.04.01'


## helper functions

_timestamp() {
    date "+%Y-%m-%d %H:%M:%S:"
}

_log() {
    echo "$1" | sed "s/^/$(_timestamp) /" >>"${LOGGING}"
}

# Both echo and log
_display() {
    echo "$1"
    _log "$1"
}

_error() {
    msg="ERROR: $1"
    echo "$msg" 1>&2
    echo "$(_timestamp) $msg" >>"${LOGGING}"
    echo "One or more errors found. See ${LOGGING} for details." 1>&2
    exit 1
}

_warning() {
    msg="WARNING: $1"
    echo "$msg" 1>&2
    echo "$(_timestamp) $msg" >>"${LOGGING}"
}

_usage() {
    echo "usage: $0 <zone name> <old IPv4 address> <new IPv4 address>"
    echo "    change named Solaris 10 zone's network address "
    echo "    "
    echo "    halts named Solaris 10 zone if running"
    echo "    replaces IPv4 address"
    echo "    boots named Solaris 10 zone if was originally running"
    echo " "
}


## work functions



#################################### MAIN ####################################

## static definitions

CURRDIR=$(pwd)

oldpwd=${CURRDIR}

# set logging information
## want verbose while developing
VERBOSE=1
LOGGING="/dev/null"

log_file_format="${CURRDIR}/$0-${OSRELEASE}-${ARCH}.%Y%m%d%H%M%S.log"
log_file="$(date \"+"${log_file_format}"\")"

if [[ ${VERBOSE} -ne 0 ]];then
    LOGGING="${log_file}"
else
LOGGING="/dev/null"
fi

export oldpwd ARCH ARCH_PROC NET_NIC
export PATH=/usr/sbin:/usr/bin:/usr/sfw/bin:/usr/ccs/bin

_display "$0: PATH is now set to '$PATH'"

if [[ $# -ne 3 ]];then
    _usage
    exit 0
fi

ZONE_NAME="$1"
OLD_IP_ADDR="$2"
NEW_IP_ADDR="$3"

ZONE_STATE_RUNNING=0
ZONE_STATE_INSTALLED=0
ZONE_STATE_CONFIGURED=0
ZONE_STATE_NEEDS_HALT_BOOT=0

# check if zone exists
zoneadm -z "${ZONE_NAME}" list -v | grep -w "${ZONE_NAME}" && {
    _display "$0: Zone does exists"
    zoneadm -z "${ZONE_NAME}" list -v | grep -w "${ZONE_NAME}" | grep -w 'running' && {
        _display "$0: Zone exists and running"
        ZONE_STATE_RUNNING=1
        ZONE_STATE_NEEDS_HALT_BOOT=1
    } || {
        zoneadm -z "${ZONE_NAME}" list -v | grep -w "${ZONE_NAME}" | grep -w 'installed' && {
            _display "$0: Zone exists and installed"
            ZONE_STATE_INSTALLED=1
            exit 0
        } || {
            zoneadm -z "${ZONE_NAME}" list -v | grep -w "${ZONE_NAME}" | grep -w 'configured' && {
                _display "$0: Zone exists and configured"
                ZONE_STATE_CONFIGURED=1
            } || {
                _error "$0: Zone ${ZONE_NAME} is not in configured, installed or running state"
            }
        }
    }
} || {
    _error"$0: Zone does not exist, cannot swap IPv4 Addresses"
    exit 1
}

## debug
zonecfg -z "${ZONE_NAME}" info

if [[ "${ZONE_STATE_NEEDS_HALT_BOOT}" ]]; then
    zoneadm -z "${ZONE_NAME}" halt
fi

## change the network address for the zone
tmpfile=$(mktemp /tmp/setup_zone_$$.tmp)
echo "select net address=${OLD_IP_ADDR}" > "${tmpfile}"
echo "set address=${NEW_IP_ADDR}/24" >> "${tmpfile}"
echo "end" >> "${tmpfile}"
echo "verify" >> "${tmpfile}"
echo "commit" >> "${tmpfile}"
## cat "${tmpfile}"
zonecfg -z "${ZONE_NAME}" -f "${tmpfile}"
rm -f "${tmpfile}"

if [[ "${ZONE_STATE_NEEDS_HALT_BOOT}" ]]; then
    zoneadm -z "${ZONE_NAME}" boot
fi

## debug
zonecfg -z "${ZONE_NAME}" info
