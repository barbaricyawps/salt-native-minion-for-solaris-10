# Copyright 2019-2022 VMware, Inc.
# SPDX-License-Identifier: Apache-2

---
stages:
  - lint
  - build_pkg
##    - test_pkg
##    - upload
##    - release


##  building trial version of CI here which should eventually move to utilize
## ci-templates.  Trying here first allows for issues to be worked out without
## having to handle two different branches

## Note: due to Solaris 10 (32-bit), normal GI CI/CD job caching of build product
##      is not available, hence the build product is cached in Artifactory
##      https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/
##                 ^^^^^^^
## TBD the above url has to change since artifactory is no more
## TBD need a new location to store and retrieve intermediate build product
##
## Also: PyInstaller v4.3 and v4.4 does not fully support Solaris, hence using v4.2
##      Got PyInstaller v5.5 working with Solaris

variables:
  PLUGIN_PACKAGES: "*.tar.gz"
  CICD_UPSTREAM_PATH: "saltstack/open/salt-native-minion-solaris10"
  CICD_JFROG_BLOB_PATTERN: "salt-.tar.gz"
  CICD_JFROG_BLOB_REPO: "enterprise-staging"
  CICD_JFROG_BLOB_TAG_REPO: "enterprise-production"
  CICD_JFROG_BLOG_REPO_PATH: "solaris10"
  CICD_SALT_VERSION:  "3001.1"
  CICD_SALT_RELEASE:  "1"
  CICD_SALT_DATE: "Thu Jan 1 1970"
#  CICD_SALT_LOCATION: "git+https://github.com/saltstack/salt@${CI_COMMIT_REF_NAME}#egg=salt"
  CICD_SALT_LOCATION: "salt"
  CICD_SALT_DEV_BRANCH: "master"
  CICD_ZEROMQ_VER: "4.3.3"
  CICD_PYTHON_VER: "3.9.14"
  ## CICD_PYTHON_VER: "3.7.10"
## a little advertizing, an work-around runpath size issues
  OPT_SALT_PATH: 'tiamat'
  PYINSTALLER_VER: "5.5"

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID == null

## include:
## ## Need top populate staging, once there presume release is as usual
## ##  # upload jobs
## ##  - project: "saltstack/pop/cicd/ci-templates"
## ##    file: "/upload/upload_blob_jfrog.yml"
##   # release jobs
##   - project: "saltstack/pop/cicd/ci-templates"
##     file: "/release/release_blob.yml"


default:
  before_script:
    - mkdir /root/ || true
    - echo "machine artifactory.saltstack.net login $ARTIFACTORY_USERNAME password $ARTIFACTORY_API_TOKEN" > ~/.netrc
    - echo "machine gitlab.com login gitlab-ci-token password ${CI_JOB_TOKEN}" >> ~/.netrc


build-solaris10:
  stage: build_pkg
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - "*.tar.gz"
      - "trigger_file_done"
    expire_in: 120 days
    reports:
      dotenv: build.env
  tags:
    - solaris10
  script:
    - oldpwd=$(pwd)
    - date
    - svcadm disable svc:/network/ntp:default
    - ntpdate -s time.nist.gov
    - date
    ## clean up any lingering build product
    - ls -alh /opt/csw/bin/pkgutil
    - rm -fR dist
    - rm -fR build
    - rm -fR dev_python3
    - if [[ -h "/${OPT_SALT_PATH}" ]]; then rm -f "/${OPT_SALT_PATH}"; fi
    - if [[ -d "/opt/saltstack" ]]; then rm -fR "/opt/saltstack"; fi
    - if [[ -d "/opt/local/etc/salt" ]]; then rm -fR "/opt/local/etc/salt"; fi
    - if [[ -f "/usr/bin/salt-call" ]]; then rm -f "/usr/bin/salt-call"; fi
    - if [[ -f "/usr/bin/salt-minion" ]]; then rm -f "/usr/bin/salt-minion"; fi
    ## on to the build
    - mkdir -p dev_python3
    - mkdir -p /usr/local/lib
    - mkdir -p /usr/local/bin
    - mkdir -p /export/home/root
    - export HOME=/export/home/root
    ## setup tools on the machine
    - export PATH=/opt/local/bin:/opt/csw/bin:/opt/csw/sbin:/opt/csw/gnu:/usr/sbin:/usr/bin:/usr/sfw/bin:/usr/ccs/bin
    - ./setup_machine
    - command -v curl
    - ulimit -n 4000
    - crle -l /usr/local/lib:/opt/local/lib:/opt/csw/lib:/lib:/usr/lib
    - export LD_LIBRARY_PATH=/usr/local/lib:/opt/local/lib:/opt/csw/lib:$LD_LIBRARY_PATH
    - echo "HOME is ,${HOME},"
    ## clear out cache
    - rm -fR ${HOME}/.cache/pip
    ## Python CICD_PYTHON_VER
    - cd ${oldpwd}
    - mv Python-${CICD_PYTHON_VER}.tgz dev_python3/
    - cd dev_python3
    ## Solaris 10 is old and ssh has issues, using provided version of Python 3
    ## - wget https://www.python.org/ftp/python/${CICD_PYTHON_VER}/Python-${CICD_PYTHON_VER}.tgz
    - gunzip -c Python-${CICD_PYTHON_VER}.tgz | tar xvf -
    - cd Python-${CICD_PYTHON_VER}
    - cd Modules/
    - patch -N < $oldpwd/solaris10_py378_sktmodule.patch
    - cd ..
    - cd Lib/ctypes
    - patch -N < $oldpwd/solaris10_crle.patch
    - cd ../..
    - ./configure --with-openssl=/opt/csw/ --enable-optimizations --enable-shared --enable-ipv6 LDFLAGS='-L/opt/local/lib -I/opt/csw/include -L/opt/csw/lib -R/opt/local/lib' PKG_CONFIG_PATH=/opt/csw/lib/amd64/pkgconfig/ CPPFLAGS='-L/opt/local/lib -I/opt/csw/include -DFFI_NO_RAW_API -I/opt/csw/lib/libffi-3.2.1/include -L/opt/csw/lib -R/opt/local/lib' CFLAGS='-L/opt/local/lib -I/opt/csw/include -DFFI_NO_RAW_API -I/opt/csw/lib/libffi-3.2.1/include -L/opt/csw/lib -R/opt/local/lib'
    - make altinstall
    - cd /usr/bin/
    - ln -sf /usr/local/bin/python3.9 python3
    - ln -sf /usr/local/bin/python3.9 python3.9
    - ln -sf /usr/local/bin/python3.9-config python3-config
    - ln -sf /usr/local/bin/pip3.9 pip3
    ## - ln -sf /usr/local/bin/python3.7 python3
    ## - ln -sf /usr/local/bin/python3.7 python3.7
    ## - ln -sf /usr/local/bin/python3.7m-config python3m-config
    ## - ln -sf /usr/local/bin/pip3.7 pip3
    - export PATH=/usr/local/bin/:$PATH
    - export LD_RUN_PATH=/usr/local/lib:$LD_RUN_PATH
    - cd ${oldpwd}
    ## PyInstaller bootloader for Solaris 10
    ## see https://pyinstaller.readthedocs.io/en/stable/bootloader-building.html#building-for-aix
    ## ensure empty environment
    - rm -fR ${oldpwd}/dev_pyinstaller
    - mkdir -p ${oldpwd}/dev_pyinstaller
    - cd ${oldpwd}/dev_pyinstaller
    ## - pip3 config set global.trusted-host "pypi.org files.pythonhosted.org"
    ## - pip3 config --global set global.trusted-host "pypi.org files.pythonhosted.org"
    - python3 -m pip install pyinstaller-hooks-contrib
    - python3 -m pip install altgraph
    - python3 -m pip install importlib-metadata
    - python3 -m pip install wheel
    - python3 -m pip install pop-config==8.0.2
    ## - git config --global http.sslverify false        # need this on Sparc
    - git clone -b "v${PYINSTALLER_VER}" https://github.com/pyinstaller/pyinstaller.git
    ## could not get it or waf to work well, so simple solution of 2-3 days of trying, create a dummy executable /opt/freeware/bin/strip file which does nothing
    - echo '#!/opt/csw/bin/bash' > /opt/csw/bin/strip
    - echo "# dummy" >> /opt/csw/bin/strip
    - chmod 755 /opt/csw/bin/strip
    - chown root:bin /opt/csw/bin/strip
    - cd pyinstaller/bootloader/src
    - patch -N < ${oldpwd}/solaris10_pyinst_global_55.patch
    - patch -N < ${oldpwd}/solaris10_pyinst_utils_55.patch
    - cd ..
    - python3 ./waf configure all --gcc --target-arch=32bit
    - cd ..
    - export PYINSTALLER_DIR=$(pwd)
    - python3 setup.py install
    - cd ${oldpwd}
    ## Build zeromq for Solaris 10
    - rm -fR dev_zeromq
    - mkdir dev_zeromq
    - mv zeromq-${CICD_ZEROMQ_VER}.tar.gz dev_zeromq/
    - cd dev_zeromq
    ## Solaris 10 is old and ssh has issues, using provided version of zeromq
    ## SPARC - wget --no-check-certificate https://github.com/zeromq/libzmq/releases/download/v${CICD_ZEROMQ_VER}/zeromq-${CICD_ZEROMQ_VER}.tar.gz  --secure-protocol=TLSv1_2
    ## - wget https://github.com/zeromq/libzmq/releases/download/v${CICD_ZEROMQ_VER}/zeromq-${CICD_ZEROMQ_VER}.tar.gz  --secure-protocol=TLSv1_2
    - tar -xvzf zeromq-${CICD_ZEROMQ_VER}.tar.gz
    ## allow for tar giving id 1000 which isn't even valid on the system :shrug:
    - chown root:root zeromq-${CICD_ZEROMQ_VER}
    - cd zeromq-${CICD_ZEROMQ_VER}
    - ./configure
    - gmake
    - gmake install
    - cd ${oldpwd}
    - python3 -m pip install tiamat==7.10.7
    # build Salt
    - export CICD_SALT_DATE=$(date +"%a %b %0d %Y")
    ## - export CICD_SALT_LOCATION_NB="git+https://github.com/saltstack/salt@${CICD_SALT_DEV_BRANCH}#egg=salt"
    - cd ${oldpwd}
    - rm -fR dev_salt
    - mkdir dev_salt
    - cd dev_salt
    ## Currently http still works, https has issues due to age with GitHub for Salt
    ## git clone -b ${CICD_SALT_DEV_BRANCH} https://github.com/saltstack/salt.git
    - git clone -b ${CICD_SALT_DEV_BRANCH} http://github.com/saltstack/salt.git
    - cd salt
    - python3 setup.py -q sdist
    - cd dist
    ## Hand_build - cd dev_salt/salt/dist
    - export CICD_SALT_TAR_GZ_NAME=$(ls salt-*)
    - export CICD_SALT_LOCATION_NB=$(pwd)/${CICD_SALT_TAR_GZ_NAME}
    - ls -alh
    - export CICD_SALT_VERSION=$(ls salt-* | sed s/salt-// | sed s/.tar.gz//)
    - echo "$CICD_SALT_VERSION"
    - echo "$CICD_SALT_RELEASE"
    - echo "CI_PROJECT_DIR is ${CI_PROJECT_DIR}"
    - echo "$CICD_SALT_LOCATION"
    - cd ${oldpwd}
    - rm -f solaris10_requirements.txt
    - cp requirements.txt solaris10_requirements.txt
    - export CICD_SALT_LOCATION_NB="./dev_salt/salt/dist/salt-${CICD_SALT_VERSION}.tar.gz"
    - echo "CICD_SALT_LOCATION_NB is ${CICD_SALT_LOCATION_NB}"
    - sed -i 's&SALT_LOCATION&'"$CICD_SALT_LOCATION_NB"'&' solaris10_requirements.txt
    - cat solaris10_requirements.txt
    - export CICD_SALT_VERSION_ADJ=$(echo "$CICD_SALT_VERSION" | sed "s/-/_/"g | sed "s/+/_/"g)
    - cd ${oldpwd}
    ## now build
    - sed -i 's&PYINSTALLER_LOCATION&'${PYINSTALLER_DIR}'&' build.conf
    - cat build.conf
    - tiamat build -c build.conf
    - find dist -name __pycache__ | xargs rm -fR
    - find dist -name "*.pyc" | xargs rm -f
    - find dist -name "*.pyo" | xargs rm -f
    - rm -f dist/run/setuptools/command/"launcher manifest.xml"
    - rm -f dist/run/setuptools/"script (dev).tmpl"
    - rm -f dist/run/setuptools/text/"Lorem ipsum.txt"
    ## NOW TO PACKAGE IT
    - cd ${oldpwd}
    - rm -fR dev_pkg
    - mkdir dev_pkg
    ## ensure no user owning files but root which is used to build
    - chown -R root:root *
    - mkdir -p dev_pkg/opt/saltstack/salt
    - chown root:sys dev_pkg/opt
    - mkdir -p dev_pkg/opt/saltstack/salt/config.dist
    - mkdir -p dev_pkg/opt/local/etc/salt
    - mkdir -p dev_pkg/opt/local/etc/salt/minion.d
    - mkdir -p dev_pkg/opt/local/etc/salt/pki/minion
    - cp -a ${oldpwd}/dist/run dev_pkg/opt/saltstack/salt/
    # keep copy in /opt/saltstack/salt in case install into sparse zone where /usr is read-only
    - cp -a ${oldpwd}/salt-minion ${oldpwd}/salt-call dev_pkg/opt/saltstack/salt/
    - cp -a dev_salt/salt/pkg/solaris/salt-minion.xml dev_pkg/opt/saltstack/salt/config.dist/salt-minion-zone.xml
    - cp -a dev_salt/salt/pkg/solaris/salt-minion.xml dev_pkg/opt/saltstack/salt/config.dist/salt-minion-global.xml
    - cp -a dev_salt/salt/conf/minion dev_pkg/opt/local/etc/salt/
    ## remove x permission otherwise errors due to no python version specified
    - chmod 644 dev_pkg/opt/saltstack/salt/run/pip/_vendor/appdirs.py
    - chmod 644 dev_pkg/opt/saltstack/salt/run/pip/_vendor/chardet/cli/chardetect.py
    - chmod 644 dev_pkg/opt/saltstack/salt/run/pip/_vendor/requests/certs.py
    - chmod 644 dev_pkg/opt/saltstack/salt/run/pkg_resources/_vendor/appdirs.py
    ## cleanup dev_salt save space
    ## - rm -fR dev_salt
    - perl -pi -e 's/\/opt\/local\/bin/\/usr\/bin/' dev_pkg/opt/saltstack/salt/config.dist/salt-minion-global.xml
    - perl -pi -e 's/\/etc\/salt/\/opt\/local\/etc\/salt/' dev_pkg/opt/saltstack/salt/config.dist/salt-minion-global.xml
    - perl -pi -e 's/\/opt\/local\/bin/\/opt\/saltstack\/salt/' dev_pkg/opt/saltstack/salt/config.dist/salt-minion-zone.xml
    - perl -pi -e 's/\/etc\/salt/\/opt\/local\/etc\/salt/' dev_pkg/opt/saltstack/salt/config.dist/salt-minion-zone.xml
    ## --- WARNING HERE BE DRAGONS ---
    ## This is where I left off in the package creation process
    ## The goal was to use chrpath to ensure that every .so in the Salt package
    ## would look first in the /opt/saltstack/salt/run hierarchy for libraries
    ##
    ## there is a problem with using chrpath in Solaris Upd 8, as the elf dynamic string table
    ## can only reduce runpath/rpath sizes.  Later versions of the elf dynamic string table
    ## have an extra 0x200 bytes to allow for larger runpaths, /usr/include/sys/link.h DT_SUNW_STRPAD
    ## hence work-around is to use symbolic links fitting inside existing runpath '/opt/csw/lib:/opt/local/lib'
    ## noting that a large number of *.so files runpath or rpath is '/opt/csw/lib'
    ##
    ## using OPT_SALT_PATH='tiamat' which is a symbolic link to /opt/saltstack/salt/run directory (a little advertizing)
    ##
    - cd ${oldpwd}/dev_pkg
    - find opt/saltstack/salt/run -name \*.so -exec chrpath -r "/${OPT_SALT_PATH}" {} \;
    - find opt/saltstack/salt/run -name \*.so\.* -exec chrpath -r "/${OPT_SALT_PATH}" {} \;
    - cp -a opt /
    - cd ${oldpwd}
    - rm -fR /tmp/pkgbuild
    - mkdir -p /tmp/pkgbuild
    - echo "/opt" > /tmp/pkgbuild/files
    - echo "/opt/local" >> /tmp/pkgbuild/files
    - echo "/opt/local/etc" >> /tmp/pkgbuild/files
    - find /opt/saltstack -print >> /tmp/pkgbuild/files
    - find /opt/local/etc/salt -print >> /tmp/pkgbuild/files
    - echo "i pkginfo" > /tmp/pkgbuild/Prototype
    - echo "i postinstall" >> /tmp/pkgbuild/Prototype
    - cat /tmp/pkgbuild/files | pkgproto >> /tmp/pkgbuild/Prototype
    # Create pkginfo and postinstall as needed -- set correct version number, architecture, etc.
    - PKG_ARCH=
    - PKG_SUFFIX=
    - if [[ $(uname -m) = 'i86pc' ]];then PKG_ARCH='i386'; PKG_SUFFIX='x86'; else PKG_ARCH='sun4u'; PKG_SUFFIX='sparc'; fi
    - CURR_DATE=$(date '+%d%h%Y')
    - cp solaris10_pkginfo pkginfo
    - sed -i 's&SALT_CURR_DATE&'"${CURR_DATE}"'&' pkginfo
    - sed -i 's&SALT_CURR_VERSION&'"${CICD_SALT_VERSION_ADJ}"'&' pkginfo
    - sed -i 's&SALT_PKG_ARCH&'"${PKG_ARCH}"'&' pkginfo
    - cat pkginfo
    - cp pkginfo /tmp/pkgbuild/
    - cp solaris10_postinstall postinstall
    - sed -i 's&SALT_ROOT_SHORT_PATH&'"$OPT_SALT_PATH"'&' postinstall
    - cat postinstall
    ## now build the Solaris 10 package with everything set up
    - cp postinstall /tmp/pkgbuild
    - cd /tmp/pkgbuild
    - pkgmk -o -r / -d /tmp/pkgbuild -f Prototype
    # oce the package is built, clean up files before creating tarball
    ## rm -f Prototype files postinstall pkginfo
    - rm -f ${oldpwd}/Prototype ${oldpwd}/files ${oldpwd}/postinstall ${oldpwd}/pkginfo
    - mv  Prototype ${oldpwd}/Prototype_lastbld
    - mv  files ${oldpwd}/files_lastbld
    - mv  postinstall ${oldpwd}/postinstall_lastbld
    - mv  pkginfo ${oldpwd}/pkginfo_lastbld
    ## tar it up, ensure use Solaris tar rather than gnu, otherwise Longlink errors
    ## if compress gnu and expand with Solaris
    - rm -f "${oldpwd}/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar"
    - rm -f "${oldpwd}/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz"
    - /usr/sbin/tar -cvf "$oldpwd/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar" .
    - gzip "${oldpwd}/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar"
    - cd ${oldpwd}
    - ls -alh *.tar*
    # note, when developing your own fork, need to leverage your own username and API Token for Artifactory
    #   as ARTIFACTORY_USERNAME and ARTIFACTORY_API_TOKEN are only available for write on master branch
    # for example:
    #   curl -u ${USERNAME}:${API_TOKEN} -X PUT https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz -T ${oldpwd}/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz"
    ## curl -n -X PUT "https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz" -T "${oldpwd}/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz"
##     - curl -u "${FORK_USER}":"${FORK_API_TOKEN}" -X PUT "https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz" -T "${oldpwd}/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz"
    - echo "done" > trigger_file_done
    - ls -alh

  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success


## build-solaris10-sparc:
##   stage: build_pkg
##   artifacts:
##     name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
##     paths:
##       - "*.tar.gz"
##       - "trigger_file_done"
##     expire_in: 120 days
##     reports:
##       dotenv: build.env
##   tags:
##     - solaris10-sparc
##   script:
##     - oldpwd=$(pwd)
##     - date
##     - svcadm disable svc:/network/ntp:default
##     - ntpdate -s time.nist.gov
##     - date
##     ## clean up any lingering build product
##     - ls -alh /opt/csw/bin/pkgutil
##     - rm -fR dist
##     - rm -fR build
##     - rm -fR dev_python3
##     - if [[ -h "/${OPT_SALT_PATH}" ]]; then rm -f "/${OPT_SALT_PATH}"; fi
##     - if [[ -d "/opt/saltstack" ]]; then rm -fR "/opt/saltstack"; fi
##     - if [[ -d "/opt/local/etc/salt" ]]; then rm -fR "/opt/local/etc/salt"; fi
##     - if [[ -f "/usr/bin/salt-call" ]]; then rm -f "/usr/bin/salt-call"; fi
##     - if [[ -f "/usr/bin/salt-minion" ]]; then rm -f "/usr/bin/salt-minion"; fi
##     ## on to the build
##     - mkdir -p dev_python3
##     - mkdir -p /usr/local/lib
##     - mkdir -p /usr/local/bin
##     - mkdir -p /export/home/root
##     - export HOME=/export/home/root
##     ## setup tools on the machine
##     - export PATH=/opt/local/bin:/opt/csw/bin:/opt/csw/sbin:/opt/csw/gnu:/usr/sbin:/usr/bin:/usr/sfw/bin:/usr/ccs/bin
##     - ./setup_machine
##     - command -v curl
##     - ulimit -n 4000
##     - crle -l /usr/local/lib:/opt/local/lib:/opt/csw/lib:/lib:/usr/lib
##     - export LD_LIBRARY_PATH=/usr/local/lib:/opt/local/lib:/opt/csw/lib:$LD_LIBRARY_PATH
##     - echo "HOME is ,${HOME},"
##     ## clear out cache
##     - rm -fR ${HOME}/.cache/pip
##     ## Python CICD_PYTHON_VER
##     - cd ${oldpwd}
##     - mv Python-${CICD_PYTHON_VER}.tgz dev_python3/
##     - cd dev_python3
##     ## Solaris 10 is old and ssh has issues, using provided version of Python 3
##     ## - wget https://www.python.org/ftp/python/${CICD_PYTHON_VER}/Python-${CICD_PYTHON_VER}.tgz
##     - gunzip -c Python-${CICD_PYTHON_VER}.tgz | tar xvf -
##     - cd Python-${CICD_PYTHON_VER}
##     - cd Modules/
##     - patch -N < $oldpwd/solaris10_py378_sktmodule.patch
##     - cd ..
##     - cd Lib/ctypes
##     - patch -N < $oldpwd/solaris10_crle.patch
##     - cd ../..
##     - ./configure --with-openssl=/opt/csw/ --enable-optimizations --enable-shared --enable-ipv6 LDFLAGS='-L/opt/local/lib -I/opt/csw/include -L/opt/csw/lib -R/opt/local/lib' PKG_CONFIG_PATH=/opt/csw/lib/sparc/pkgconfig/ CPPFLAGS='-L/opt/local/lib -I/opt/csw/include -DFFI_NO_RAW_API -I/opt/csw/lib/libffi-3.2.1/include -L/opt/csw/lib -R/opt/local/lib' CFLAGS='-L/opt/local/lib -I/opt/csw/include -DFFI_NO_RAW_API -I/opt/csw/lib/libffi-3.2.1/include -L/opt/csw/lib -R/opt/local/lib'
##     - make altinstall
##     - cd /usr/bin/
##     - ln -sf /usr/local/bin/python3.9 python3
##     - ln -sf /usr/local/bin/python3.9 python3.9
##     - ln -sf /usr/local/bin/python3.9-config python3-config
##     - ln -sf /usr/local/bin/pip3.9 pip3
##     - export PATH=/usr/local/bin/:$PATH
##     - export LD_RUN_PATH=/usr/local/lib:$LD_RUN_PATH
##     - cd ${oldpwd}
##     ## PyInstaller bootloader for Solaris 10
##     ## see https://pyinstaller.readthedocs.io/en/stable/bootloader-building.html#building-for-aix
##     ## ensure empty environment
##     - rm -fR ${oldpwd}/dev_pyinstaller
##     - mkdir -p ${oldpwd}/dev_pyinstaller
##     - cd ${oldpwd}/dev_pyinstaller
##     ## - pip3 config set global.trusted-host "pypi.org files.pythonhosted.org"
##     ## - pip3 config --global set global.trusted-host "pypi.org files.pythonhosted.org"
##     - python3 -m pip install pyinstaller-hooks-contrib
##     - python3 -m pip install altgraph
##     - python3 -m pip install importlib-metadata
##     - python3 -m pip install wheel
##     - python3 -m pip install pop-config==8.0.2
##     ## - git config --global http.sslverify false        # need this on Sparc
##     - git clone -b "v${PYINSTALLER_VER}" https://github.com/pyinstaller/pyinstaller.git
##     ## could not get it or waf to work well, so simple solution of 2-3 days of trying, create a dummy executable /opt/freeware/bin/strip file which does nothing
##     - echo '#!/opt/csw/bin/bash' > /opt/csw/bin/strip
##     - echo "# dummy" >> /opt/csw/bin/strip
##     - chmod 755 /opt/csw/bin/strip
##     - chown root:bin /opt/csw/bin/strip
##     - cd pyinstaller/bootloader/src
##     - patch -N < ${oldpwd}/solaris10_pyinst_global_55.patch
##     - patch -N < ${oldpwd}/solaris10_pyinst_utils_55.patch
##     - cd ..
##     - python3 ./waf configure all --gcc --target-arch=32bit
##     - cd ..
##     - export PYINSTALLER_DIR=$(pwd)
##     - python3 setup.py install
##     - cd ${oldpwd}
##     ## Build zeromq for Solaris 10
##     - rm -fR dev_zeromq
##     - mkdir dev_zeromq
##     - mv zeromq-${CICD_ZEROMQ_VER}.tar.gz dev_zeromq/
##     - cd dev_zeromq
##     ## Solaris 10 is old and ssh has issues, using provided version of zeromq
##     ## Intel - wget https://github.com/zeromq/libzmq/releases/download/v${CICD_ZEROMQ_VER}/zeromq-${CICD_ZEROMQ_VER}.tar.gz  --secure-protocol=TLSv1_2
##     ## SPARC - wget --no-check-certificate https://github.com/zeromq/libzmq/releases/download/v${CICD_ZEROMQ_VER}/zeromq-${CICD_ZEROMQ_VER}.tar.gz  --secure-protocol=TLSv1_2
##     - wget --no-check-certificate https://github.com/zeromq/libzmq/releases/download/v${CICD_ZEROMQ_VER}/zeromq-${CICD_ZEROMQ_VER}.tar.gz  --secure-protocol=TLSv1_2
##     - tar -xvzf zeromq-${CICD_ZEROMQ_VER}.tar.gz
##     ## allow for tar giving id 1000 which isn't even valid on the system :shrug:
##     - chown root:root zeromq-${CICD_ZEROMQ_VER}
##     - cd zeromq-${CICD_ZEROMQ_VER}
##     - ./configure
##     - gmake
##     - gmake install
##     - cd ${oldpwd}
##     - python3 -m pip install tiamat==7.10.7
##     # build Salt
##     - export CICD_SALT_DATE=$(date +"%a %b %0d %Y")
##     ## - export CICD_SALT_LOCATION_NB="git+https://github.com/saltstack/salt@${CICD_SALT_DEV_BRANCH}#egg=salt"
##     - cd ${oldpwd}
##     - rm -fR dev_salt
##     - mkdir dev_salt
##     - cd dev_salt
##      ## Currently http still works, https has issues due to age with GitHub for Salt
##      ## git clone -b ${CICD_SALT_DEV_BRANCH} https://github.com/saltstack/salt.git
##      - git clone -b ${CICD_SALT_DEV_BRANCH} http://github.com/saltstack/salt.git
##     - cd salt
##     - python3 setup.py -q sdist
##     - cd dist
##     ## Hand_build - cd dev_salt/salt/dist
##     - export CICD_SALT_TAR_GZ_NAME=$(ls salt-*)
##     - export CICD_SALT_LOCATION_NB=$(pwd)/${CICD_SALT_TAR_GZ_NAME}
##     - ls -alh
##     - export CICD_SALT_VERSION=$(ls salt-* | sed s/salt-// | sed s/.tar.gz//)
##     - echo "$CICD_SALT_VERSION"
##     - echo "$CICD_SALT_RELEASE"
##     - echo "CI_PROJECT_DIR is ${CI_PROJECT_DIR}"
##     - echo "$CICD_SALT_LOCATION"
##     - cd ${oldpwd}
##     - rm -f solaris10_requirements.txt
##     - cp requirements.txt solaris10_requirements.txt
##     - export CICD_SALT_LOCATION_NB="./dev_salt/salt/dist/salt-${CICD_SALT_VERSION}.tar.gz"
##     - echo "CICD_SALT_LOCATION_NB is ${CICD_SALT_LOCATION_NB}"
##     - sed -i 's&SALT_LOCATION&'"$CICD_SALT_LOCATION_NB"'&' solaris10_requirements.txt
##     - cat solaris10_requirements.txt
##     - export CICD_SALT_VERSION_ADJ=$(echo "$CICD_SALT_VERSION" | sed "s/-/_/"g | sed "s/+/_/"g)
##     - cd ${oldpwd}
##     ## now build
##     - sed -i 's&PYINSTALLER_LOCATION&'${PYINSTALLER_DIR}'&' build.conf
##     - cat build.conf
##     - tiamat build -c build.conf
##     - find dist -name __pycache__ | xargs rm -fR
##     - find dist -name "*.pyc" | xargs rm -f
##     - find dist -name "*.pyo" | xargs rm -f
##     - rm -f dist/run/setuptools/command/"launcher manifest.xml"
##     - rm -f dist/run/setuptools/"script (dev).tmpl"
##     - rm -f dist/run/setuptools/text/"Lorem ipsum.txt"
##     ## NOW TO PACKAGE IT
##     - cd ${oldpwd}
##     - rm -fR dev_pkg
##     - mkdir dev_pkg
##     ## ensure no user owning files but root which is used to build
##     - chown -R root:root *
##     - mkdir -p dev_pkg/opt/saltstack/salt
##     - chown root:sys dev_pkg/opt
##     - mkdir -p dev_pkg/opt/saltstack/salt/config.dist
##     - mkdir -p dev_pkg/opt/local/etc/salt
##     - mkdir -p dev_pkg/opt/local/etc/salt/minion.d
##     - mkdir -p dev_pkg/opt/local/etc/salt/pki/minion
##     - cp -a ${oldpwd}/dist/run dev_pkg/opt/saltstack/salt/
##     # keep copy in /opt/saltstack/salt in case install into sparse zone where /usr is read-only
##     - cp -a ${oldpwd}/salt-minion ${oldpwd}/salt-call dev_pkg/opt/saltstack/salt/
##     - cp -a dev_salt/salt/pkg/solaris/salt-minion.xml dev_pkg/opt/saltstack/salt/config.dist/salt-minion-zone.xml
##     - cp -a dev_salt/salt/pkg/solaris/salt-minion.xml dev_pkg/opt/saltstack/salt/config.dist/salt-minion-global.xml
##     - cp -a dev_salt/salt/conf/minion dev_pkg/opt/local/etc/salt/
##     ## remove x permission otherwise errors due to no python version specified
##     - chmod 644 dev_pkg/opt/saltstack/salt/run/pip/_vendor/appdirs.py
##     - chmod 644 dev_pkg/opt/saltstack/salt/run/pip/_vendor/chardet/cli/chardetect.py
##     - chmod 644 dev_pkg/opt/saltstack/salt/run/pip/_vendor/requests/certs.py
##     - chmod 644 dev_pkg/opt/saltstack/salt/run/pkg_resources/_vendor/appdirs.py
##     ## cleanup dev_salt save space
##     ## - rm -fR dev_salt
##     - perl -pi -e 's/\/opt\/local\/bin/\/usr\/bin/' dev_pkg/opt/saltstack/salt/config.dist/salt-minion-global.xml
##     - perl -pi -e 's/\/etc\/salt/\/opt\/local\/etc\/salt/' dev_pkg/opt/saltstack/salt/config.dist/salt-minion-global.xml
##     - perl -pi -e 's/\/opt\/local\/bin/\/opt\/saltstack\/salt/' dev_pkg/opt/saltstack/salt/config.dist/salt-minion-zone.xml
##     - perl -pi -e 's/\/etc\/salt/\/opt\/local\/etc\/salt/' dev_pkg/opt/saltstack/salt/config.dist/salt-minion-zone.xml
##     ## --- WARNING HERE BE DRAGONS ---
##     ## This is where I left off in the package creation process
##     ## The goal was to use chrpath to ensure that every .so in the Salt package
##     ## would look first in the /opt/saltstack/salt/run hierarchy for libraries
##     ##
##     ## there is a problem with using chrpath in Solaris Upd 8, as the elf dynamic string table
##     ## can only reduce runpath/rpath sizes.  Later versions of the elf dynamic string table
##     ## have an extra 0x200 bytes to allow for larger runpaths, /usr/include/sys/link.h DT_SUNW_STRPAD
##     ## hence work-around is to use symbolic links fitting inside existing runpath '/opt/csw/lib:/opt/local/lib'
##     ## noting that a large number of *.so files runpath or rpath is '/opt/csw/lib'
##     ##
##     ## using OPT_SALT_PATH='tiamat' which is a symbolic link to /opt/saltstack/salt/run directory (a little advertizing)
##     ##
##     - cd ${oldpwd}/dev_pkg
##     - find opt/saltstack/salt/run -name \*.so -exec chrpath -r "/${OPT_SALT_PATH}" {} \;
##     - find opt/saltstack/salt/run -name \*.so\.* -exec chrpath -r "/${OPT_SALT_PATH}" {} \;
##     - cp -a opt /
##     - cd ${oldpwd}
##     - rm -fR /tmp/pkgbuild
##     - mkdir -p /tmp/pkgbuild
##     - echo "/opt" > /tmp/pkgbuild/files
##     - echo "/opt/local" >> /tmp/pkgbuild/files
##     - echo "/opt/local/etc" >> /tmp/pkgbuild/files
##     - find /opt/saltstack -print >> /tmp/pkgbuild/files
##     - find /opt/local/etc/salt -print >> /tmp/pkgbuild/files
##     - echo "i pkginfo" > /tmp/pkgbuild/Prototype
##     - echo "i postinstall" >> /tmp/pkgbuild/Prototype
##     - cat /tmp/pkgbuild/files | pkgproto >> /tmp/pkgbuild/Prototype
##     # Create pkginfo and postinstall as needed -- set correct version number, architecture, etc.
##     - PKG_ARCH=
##     - PKG_SUFFIX=
##     - if [[ $(uname -m) = 'i86pc' ]];then PKG_ARCH='i386'; PKG_SUFFIX='x86'; else PKG_ARCH='sun4u'; PKG_SUFFIX='sparc'; fi
##     - CURR_DATE=$(date '+%d%h%Y')
##     - cp solaris10_pkginfo pkginfo
##     - sed -i 's&SALT_CURR_DATE&'"${CURR_DATE}"'&' pkginfo
##     - sed -i 's&SALT_CURR_VERSION&'"${CICD_SALT_VERSION_ADJ}"'&' pkginfo
##     - sed -i 's&SALT_PKG_ARCH&'"${PKG_ARCH}"'&' pkginfo
##     - cat pkginfo
##     - cp pkginfo /tmp/pkgbuild/
##     - cp solaris10_postinstall postinstall
##     - sed -i 's&SALT_ROOT_SHORT_PATH&'"$OPT_SALT_PATH"'&' postinstall
##     - cat postinstall
##     ## now build the Solaris 10 package with everything set up
##     - cp postinstall /tmp/pkgbuild
##     - cd /tmp/pkgbuild
##     - pkgmk -o -r / -d /tmp/pkgbuild -f Prototype
##     # oce the package is built, clean up files before creating tarball
##     ## rm -f Prototype files postinstall pkginfo
##     - rm -f ${oldpwd}/Prototype ${oldpwd}/files ${oldpwd}/postinstall ${oldpwd}/pkginfo
##     - mv  Prototype ${oldpwd}/Prototype_lastbld
##     - mv  files ${oldpwd}/files_lastbld
##     - mv  postinstall ${oldpwd}/postinstall_lastbld
##     - mv  pkginfo ${oldpwd}/pkginfo_lastbld
##     ## tar it up, ensure use Solaris tar rather than gnu, otherwise Longlink errors
##     ## if compress gnu and expand with Solaris
##     - rm -f "${oldpwd}/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar"
##     - rm -f "${oldpwd}/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz"
##     - /usr/sbin/tar -cvf "$oldpwd/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar" .
##     - gzip "${oldpwd}/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar"
##     - cd ${oldpwd}
##     - ls -alh *.tar*
##     # note, when developing your own fork, need to leverage your own username and API Token for Artifactory
##     #   as ARTIFACTORY_USERNAME and ARTIFACTORY_API_TOKEN are only available for write on master branch
##     # for example:
##     #   curl -u ${USERNAME}:${API_TOKEN} -X PUT https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz -T ${oldpwd}/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz"
##     ## curl -n -X PUT "https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz" -T "${oldpwd}/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz"
##     ## - curl -u "${FORK_USER}":"${FORK_API_TOKEN}" -X PUT "https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz" -T "${oldpwd}/salt-${CICD_SALT_VERSION_ADJ}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz"
##     - echo "done" > trigger_file_done
##     - ls -alh
##
##   rules:
##     - if: $CI_COMMIT_TAG
##       when: never
##     - when: on_success


build-tags-solaris10:
  stage: build_pkg
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
##      - "*.tar.gz"
      - "trigger_file_done"
    expire_in: 120 days
    reports:
      dotenv: build.env
  tags:
    - solaris10
  script:
    - oldpwd=$(pwd)
    - date
    - svcadm disable svc:/network/ntp:default
    - ntpdate -s time.nist.gov
    - date
    ## clean up any lingering build product
    - ls -alh /opt/csw/bin/pkgutil
    - rm -fR dist
    - rm -fR build
    - rm -fR dev_python3
    - if [[ -h "/${OPT_SALT_PATH}" ]]; then rm -f "/${OPT_SALT_PATH}"; fi
    - if [[ -d "/opt/saltstack" ]]; then rm -fR "/opt/saltstack"; fi
    - if [[ -d "/opt/local/etc/salt" ]]; then rm -fR "/opt/local/etc/salt"; fi
    - if [[ -f "/usr/bin/salt-call" ]]; then rm -f "/usr/bin/salt-call"; fi
    - if [[ -f "/usr/bin/salt-minion" ]]; then rm -f "/usr/bin/salt-minion"; fi
    ## on to the build
    - mkdir -p dev_python3
    - mkdir -p /usr/local/lib
    - mkdir -p /usr/local/bin
    - mkdir -p /export/home/root
    - export HOME=/export/home/root
    ## setup tools on the machine
    - export PATH=/opt/local/bin:/opt/csw/bin:/opt/csw/sbin:/opt/csw/gnu:/usr/sbin:/usr/bin:/usr/sfw/bin:/usr/ccs/bin
    - ./setup_machine
    - command -v curl
    - ulimit -n 4000
    - crle -l /usr/local/lib:/opt/local/lib:/opt/csw/lib:/lib:/usr/lib
    - export LD_LIBRARY_PATH=/usr/local/lib:/opt/local/lib:/opt/csw/lib:$LD_LIBRARY_PATH
    - echo "HOME is ,${HOME},"
    ## clear out cache
    - rm -fR ${HOME}/.cache/pip
    ## Python CICD_PYTHON_VER
    - cd ${oldpwd}
    - mv Python-${CICD_PYTHON_VER}.tgz dev_python3/
    - cd dev_python3
    ## Solaris 10 is old and ssh has issues, using provided version of Python 3
    ## - wget https://www.python.org/ftp/python/${CICD_PYTHON_VER}/Python-${CICD_PYTHON_VER}.tgz
    - gunzip -c Python-${CICD_PYTHON_VER}.tgz | tar xvf -
    - cd Python-${CICD_PYTHON_VER}
    - cd Modules/
    - patch -N < $oldpwd/solaris10_py378_sktmodule.patch
    - cd ..
    - cd Lib/ctypes
    - patch -N < $oldpwd/solaris10_crle.patch
    - cd ../..
    - ./configure  --with-openssl=/opt/csw/ --enable-optimizations --enable-shared --enable-ipv6 LDFLAGS='-L/opt/local/lib -I/opt/csw/include -L/opt/csw/lib  -R/opt/local/lib' PKG_CONFIG_PATH=/opt/csw/lib/amd64/pkgconfig/ CPPFLAGS='-L/opt/local/lib -I/opt/csw/include -DFFI_NO_RAW_API -I/opt/csw/lib/libffi-3.2.1/include -L/opt/csw/lib  -R/opt/local/lib' CFLAGS='-L/opt/local/lib -I/opt/csw/include -DFFI_NO_RAW_API -I/opt/csw/lib/libffi-3.2.1/include -L/opt/csw/lib  -R/opt/local/lib'
    - make altinstall
    - cd /usr/bin/
    - ln -sf /usr/local/bin/python3.9 python3
    - ln -sf /usr/local/bin/python3.9 python3.9
    - ln -sf /usr/local/bin/python3.9-config python3-config
    - ln -sf /usr/local/bin/pip3.9 pip3
    - export PATH=/usr/local/bin/:$PATH
    - export LD_RUN_PATH=/usr/local/lib:$LD_RUN_PATH
    - cd ${oldpwd}
    ## PyInstaller bootloader for Solaris 10
    ## see https://pyinstaller.readthedocs.io/en/stable/bootloader-building.html#building-for-aix
    ## ensure empty environment
    - rm -fR ${oldpwd}/dev_pyinstaller
    - mkdir -p ${oldpwd}/dev_pyinstaller
    - cd ${oldpwd}/dev_pyinstaller
    ## - pip3 config set global.trusted-host "pypi.org files.pythonhosted.org"
    ## - pip3 config --global set global.trusted-host "pypi.org files.pythonhosted.org"
    - python3 -m pip install pyinstaller-hooks-contrib
    - python3 -m pip install altgraph
    - python3 -m pip install importlib-metadata
    - python3 -m pip install wheel
    - python3 -m pip install pop-config==8.0.2
    ## - git config --global http.sslverify false        # need this on Sparc
    - git clone -b "v${PYINSTALLER_VER}" https://github.com/pyinstaller/pyinstaller.git
    ## could not get it or waf to work well, so simple solution of 2-3 days of trying, create a dummy executable /opt/freeware/bin/strip file which does nothing
    - echo '#!/opt/csw/bin/bash' > /opt/csw/bin/strip
    - echo "# dummy" >> /opt/csw/bin/strip
    - chmod 755 /opt/csw/bin/strip
    - chown root:bin /opt/csw/bin/strip
    - cd pyinstaller/bootloader/src
    - patch -N < solaris10_pyinst_global_55.patch
    - patch -N < solaris10_pyinst_utils_55.patch
    - cd ..
    - python3 ./waf configure all --gcc --target-arch=32bit
    - cd ..
    - export PYINSTALLER_DIR=$(pwd)
    - python3 setup.py install
    - cd ${oldpwd}
    ## Build zeromq for Solaris 10
    - rm -fR dev_zeromq
    - mkdir dev_zeromq
    - mv zeromq-${CICD_ZEROMQ_VER}.tar.gz dev_zeromq/
    - cd dev_zeromq
    ## Solaris 10 is old and ssh has issues, using provided version of zeromq
    ## SPARC - wget --no-check-certificate https://github.com/zeromq/libzmq/releases/download/v${CICD_ZEROMQ_VER}/zeromq-${CICD_ZEROMQ_VER}.tar.gz  --secure-protocol=TLSv1_2
    ## - wget https://github.com/zeromq/libzmq/releases/download/v${CICD_ZEROMQ_VER}/zeromq-${CICD_ZEROMQ_VER}.tar.gz  --secure-protocol=TLSv1_2
    - tar -xvzf zeromq-${CICD_ZEROMQ_VER}.tar.gz
    ## allow for tar giving id 1000 which isn't even valid on the system :shrug:
    - chown root:root zeromq-${CICD_ZEROMQ_VER}
    - cd zeromq-${CICD_ZEROMQ_VER}
    - ./configure
    - gmake
    - gmake install
    - cd ${oldpwd}
    - python3 -m pip install tiamat==7.10.7
    # build Salt
    - export CICD_SALT_DATE=$(date +"%a %b %0d %Y")
    - export CICD_SALT_TAG=$(echo "${CI_COMMIT_TAG}" | cut -d '-' -f 1)
    - export CICD_SALT_VERSION=$(echo "${CI_COMMIT_TAG}" | sed s/v// | cut -d '-' -f 1)
    - export CICD_SALT_RELEASE=$(echo "${CI_COMMIT_TAG}" | sed s/v// | cut -d '-' -f 2)
    - cd ${oldpwd}
    - rm -fR dev_salt
    - mkdir dev_salt
    - cd dev_salt
    ## Currently http still works, https has issues due to age with GitHub for Salt
    ## git clone -b ${CICD_SALT_DEV_BRANCH} https://github.com/saltstack/salt.git
    - git clone -b ${CICD_SALT_DEV_BRANCH} http://github.com/saltstack/salt.git
    - cd salt
    - python3 setup.py -q sdist
    - cd dist
    - export CICD_SALT_TAR_GZ_NAME=$(ls salt-*)
    - export CICD_SALT_LOCATION=$(pwd)/${CICD_SALT_TAR_GZ_NAME}
    - cd ${oldpwd}
    ## ensure if no release number given default to 1
    - if [[ "${CICD_SALT_VERSION}" = "${CICD_SALT_RELEASE}" ]]; then export CICD_SALT_RELEASE=1; fi
    ## - export CICD_SALT_LOCATION="git+https://github.com/saltstack/salt@${CICD_SALT_TAG}#egg=salt"
    - echo "$CICD_SALT_TAG"
    - echo "$CICD_SALT_VERSION"
    - echo "$CICD_SALT_RELEASE"
    - echo "$CICD_SALT_LOCATION"
    - cd ${oldpwd}
    - rm -f solaris10_requirements.txt
    - cp requirements.txt solaris10_requirements.txt
    - sed -i 's&SALT_LOCATION&'"$CICD_SALT_LOCATION"'&' solaris10_requirements.txt
    - cat solaris10_requirements.txt
    - cd ${oldpwd}
    ## now build
    - sed -i 's&PYINSTALLER_LOCATION&'${PYINSTALLER_DIR}'&' build.conf
    - cat build.conf
    - tiamat build -c build.conf
    - find dist -name __pycache__ | xargs rm -fR
    - find dist -name "*.pyc" | xargs rm -f
    - find dist -name "*.pyo" | xargs rm -f
    - rm -f dist/run/setuptools/command/"launcher manifest.xml"
    - rm -f dist/run/setuptools/"script (dev).tmpl"
    - rm -f dist/run/setuptools/text/"Lorem ipsum.txt"
    ## NOW TO PACKAGE IT
    - cd ${oldpwd}
    - rm -fR dev_pkg
    - mkdir dev_pkg
    ## ensure no user owning files but root which is used to build
    - chown -R root:root *
    - mkdir -p dev_pkg/opt/saltstack/salt
    - chown root:sys dev_pkg/opt
    - mkdir -p dev_pkg/opt/saltstack/salt/config.dist
    - mkdir -p dev_pkg/opt/local/etc/salt
    - mkdir -p dev_pkg/opt/local/etc/salt/minion.d
    - mkdir -p dev_pkg/opt/local/etc/salt/pki/minion
    - cp -a ${oldpwd}/dist/run dev_pkg/opt/saltstack/salt/
    # keep copy in /opt/saltstack/salt in case install into sparse zone where /usr is read-only
    - cp -a ${oldpwd}/salt-minion ${oldpwd}/salt-call dev_pkg/opt/saltstack/salt/
    - cp -a dev_salt/salt/pkg/solaris/salt-minion.xml dev_pkg/opt/saltstack/salt/config.dist/salt-minion-zone.xml
    - cp -a dev_salt/salt/pkg/solaris/salt-minion.xml dev_pkg/opt/saltstack/salt/config.dist/salt-minion-global.xml
    - cp -a dev_salt/salt/conf/minion dev_pkg/opt/local/etc/salt/
    ## remove x permission otherwise errors due to no python version specified
    - chmod 644 dev_pkg/opt/saltstack/salt/run/pip/_vendor/appdirs.py
    - chmod 644 dev_pkg/opt/saltstack/salt/run/pip/_vendor/chardet/cli/chardetect.py
    - chmod 644 dev_pkg/opt/saltstack/salt/run/pip/_vendor/requests/certs.py
    - chmod 644 dev_pkg/opt/saltstack/salt/run/pkg_resources/_vendor/appdirs.py
    ## cleanup dev_salt save space
    ## - rm -fR dev_salt
    - perl -pi -e 's/\/opt\/local\/bin/\/usr\/bin/' dev_pkg/opt/saltstack/salt/config.dist/salt-minion-global.xml
    - perl -pi -e 's/\/etc\/salt/\/opt\/local\/etc\/salt/' dev_pkg/opt/saltstack/salt/config.dist/salt-minion-global.xml
    - perl -pi -e 's/\/opt\/local\/bin/\/opt\/saltstack\/salt/' dev_pkg/opt/saltstack/salt/config.dist/salt-minion-zone.xml
    - perl -pi -e 's/\/etc\/salt/\/opt\/local\/etc\/salt/' dev_pkg/opt/saltstack/salt/config.dist/salt-minion-zone.xml
    ## --- WARNING HERE BE DRAGONS ---
    ## This is where I left off in the package creation process
    ## The goal was to use chrpath to ensure that every .so in the Salt package
    ## would look first in the /opt/saltstack/salt/run hierarchy for libraries
    ##
    ## there is a problem with using chrpath in Solaris Upd 8, as the elf dynamic string table
    ## can only reduce runpath/rpath sizes.  Later versions of the elf dynamic string table
    ## have an extra 0x200 bytes to allow for larger runpaths, /usr/include/sys/link.h DT_SUNW_STRPAD
    ## hence work-around is to use symbolic links fitting inside existing runpath '/opt/csw/lib:/opt/local/lib'
    ## noting that a large number of *.so files runpath or rpath is '/opt/csw/lib'
    ##
    ## using OPT_SALT_PATH='tiamat' which is a symbolic link to /opt/saltstack/salt/run directory (a little advertizing)
    ##
    - cd ${oldpwd}/dev_pkg
    - find opt/saltstack/salt/run -name \*.so -exec chrpath -r "/${OPT_SALT_PATH}" {} \;
    - find opt/saltstack/salt/run -name \*.so\.* -exec chrpath -r "/${OPT_SALT_PATH}" {} \;
    - cp -a opt /
    - cd ${oldpwd}
    - rm -fR /tmp/pkgbuild
    - mkdir -p /tmp/pkgbuild
    - echo "/opt" > /tmp/pkgbuild/files
    - echo "/opt/local" >> /tmp/pkgbuild/files
    - echo "/opt/local/etc" >> /tmp/pkgbuild/files
    - find /opt/saltstack -print >> /tmp/pkgbuild/files
    - find /opt/local/etc/salt -print >> /tmp/pkgbuild/files
    - echo "i pkginfo" > /tmp/pkgbuild/Prototype
    - echo "i postinstall" >> /tmp/pkgbuild/Prototype
    - cat /tmp/pkgbuild/files | pkgproto >> /tmp/pkgbuild/Prototype
    # Create pkginfo and postinstall as needed -- set correct version number, architecture, etc.
    - PKG_ARCH=
    - PKG_SUFFIX=
    - if [[ $(uname -m) = 'i86pc' ]];then PKG_ARCH='i386'; PKG_SUFFIX='x86'; else PKG_ARCH='sun4u'; PKG_SUFFIX='sparc'; fi
    - CURR_DATE=$(date '+%d%h%Y')
    - cp solaris10_pkginfo pkginfo
    - sed -i 's&SALT_CURR_DATE&'"${CURR_DATE}"'&' pkginfo
    - sed -i 's&SALT_CURR_VERSION&'"${CICD_SALT_VERSION}"'&' pkginfo
    - sed -i 's&SALT_PKG_ARCH&'"${PKG_ARCH}"'&' pkginfo
    - cat pkginfo
    - cp pkginfo /tmp/pkgbuild/
    - cp solaris10_postinstall postinstall
    - sed -i 's&SALT_ROOT_SHORT_PATH&'"$OPT_SALT_PATH"'&' postinstall
    - cat postinstall
    ## now build the Solaris 10 package with everything set up
    - cp postinstall /tmp/pkgbuild
    - cd /tmp/pkgbuild
    - pkgmk -o -r / -d /tmp/pkgbuild -f Prototype
    # once the package is built, clean up files before creating tarball
    ## rm -f Prototype files postinstall pkginfo
    - rm -f ${oldpwd}/Prototype ${oldpwd}/files ${oldpwd}/postinstall ${oldpwd}/pkginfo
    - mv  Prototype ${oldpwd}/Prototype_lastbld
    - mv  files ${oldpwd}/files_lastbld
    - mv  postinstall ${oldpwd}/postinstall_lastbld
    - mv  pkginfo ${oldpwd}/pkginfo_lastbld
    ## tar it up, ensure use Solaris tar rather than gnu, otherwise Longlink errors
    ## if compress gnu and expand with Solaris
    - rm -f "${oldpwd}/salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar"
    - rm -f "${oldpwd}/salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz"
    - /usr/sbin/tar -cvf "$oldpwd/salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar" .
    - gzip "${oldpwd}/salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar"
    - cd ${oldpwd}
    - ls -alh *.tar*
    ## - echo "cmd is curl -n -X PUT https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz -T ${oldpwd}/salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz"
    ## - curl -n -X PUT "https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz" -T "${oldpwd}/salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz"
    - echo "dog done" > trigger_file_done
    - ls -alh

  rules:
    - if: "$CI_COMMIT_TAG != null && $CI_PROJECT_PATH == $CICD_UPSTREAM_PATH"
      when: always
    - when: never


## build-tags-solaris10-sparc:
##   stage: build_pkg
##   artifacts:
##     name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
##     paths:
## ##      - "*.tar.gz"
##       - "trigger_file_done"
##     expire_in: 120 days
##     reports:
##       dotenv: build.env
##   tags:
##     - solaris10-sparc
##   script:
##     - oldpwd=$(pwd)
##     - date
##     - svcadm disable svc:/network/ntp:default
##     - ntpdate -s time.nist.gov
##     - date
##     ## clean up any lingering build product
##     - ls -alh /opt/csw/bin/pkgutil
##     - rm -fR dist
##     - rm -fR build
##     - rm -fR dev_python3
##     - if [[ -h "/${OPT_SALT_PATH}" ]]; then rm -f "/${OPT_SALT_PATH}"; fi
##     - if [[ -d "/opt/saltstack" ]]; then rm -fR "/opt/saltstack"; fi
##     - if [[ -d "/opt/local/etc/salt" ]]; then rm -fR "/opt/local/etc/salt"; fi
##     - if [[ -f "/usr/bin/salt-call" ]]; then rm -f "/usr/bin/salt-call"; fi
##     - if [[ -f "/usr/bin/salt-minion" ]]; then rm -f "/usr/bin/salt-minion"; fi
##     ## on to the build
##     - mkdir -p dev_python3
##     - mkdir -p /usr/local/lib
##     - mkdir -p /usr/local/bin
##     - mkdir -p /export/home/root
##     - mkdir -p dev_python3
##     - export HOME=/export/home/root
##     ## setup tools on the machine
##     - export PATH=/opt/local/bin:/opt/csw/bin:/opt/csw/sbin:/opt/csw/gnu:/usr/sbin:/usr/bin:/usr/sfw/bin:/usr/ccs/bin
##     - ./setup_machine
##     - command -v curl
##     - ulimit -n 4000
##     - crle -l /usr/local/lib:/opt/local/lib:/opt/csw/lib:/lib:/usr/lib
##     - export LD_LIBRARY_PATH=/usr/local/lib:/opt/local/lib:/opt/csw/lib:$LD_LIBRARY_PATH
##     - echo "HOME is ,${HOME},"
##     ## clear out cache
##     - rm -fR ${HOME}/.cache/pip
##     ## Python CICD_PYTHON_VER
##     - cd ${oldpwd}
##     - mv Python-${CICD_PYTHON_VER}.tgz dev_python3/
##     - cd dev_python3
##     ## Solaris 10 is old and ssh has issues, using provided version of Python 3
##     ## - wget https://www.python.org/ftp/python//${CICD_PYTHON_VER}Python-${CICD_PYTHON_VER}.tgz
##     - gunzip -c Python-${CICD_PYTHON_VER}.tgz | tar xvf -
##     - cd Python-${CICD_PYTHON_VER}
##     - cd Modules/
##     - patch -N < $oldpwd/solaris10_py378_sktmodule.patch
##     - cd ..
##     - cd Lib/ctypes
##     - patch -N < $oldpwd/solaris10_crle.patch
##     - cd ../..
##     - ./configure  --with-openssl=/opt/csw/ --enable-optimizations --enable-shared --enable-ipv6 LDFLAGS='-L/opt/local/lib -I/opt/csw/include -L/opt/csw/lib  -R/opt/local/lib' PKG_CONFIG_PATH=/opt/csw/lib/amd64/pkgconfig/ CPPFLAGS='-L/opt/local/lib -I/opt/csw/include -DFFI_NO_RAW_API -I/opt/csw/lib/libffi-3.2.1/include -L/opt/csw/lib  -R/opt/local/lib' CFLAGS='-L/opt/local/lib -I/opt/csw/include -DFFI_NO_RAW_API -I/opt/csw/lib/libffi-3.2.1/include -L/opt/csw/lib  -R/opt/local/lib'
##     - make altinstall
##     - cd /usr/bin/
##     - ln -sf /usr/local/bin/python3.9 python3
##     - ln -sf /usr/local/bin/python3.9 python3.9
##     - ln -sf /usr/local/bin/python3.9-config python3-config
##     - ln -sf /usr/local/bin/pip3.9 pip3
##     - export PATH=/usr/local/bin/:$PATH
##     - export LD_RUN_PATH=/usr/local/lib:$LD_RUN_PATH
##     - cd ${oldpwd}
##     ## PyInstaller bootloader for Solaris 10
##     ## see https://pyinstaller.readthedocs.io/en/stable/bootloader-building.html#building-for-aix
##     ## ensure empty environment
##     - rm -fR ${oldpwd}/dev_pyinstaller
##     - mkdir -p ${oldpwd}/dev_pyinstaller
##     - cd ${oldpwd}/dev_pyinstaller
##     - pip3 config set global.trusted-host "pypi.org files.pythonhosted.org"
##     - pip3 config --global set global.trusted-host "pypi.org files.pythonhosted.org"
##     - python3 -m pip install pyinstaller-hooks-contrib
##     - python3 -m pip install altgraph
##     - python3 -m pip install importlib-metadata
##     - python3 -m pip install wheel
##     - python3 -m pip install pop-config==8.0.2
##     - git config --global http.sslverify false        # need this on Sparc
##     - git clone -b "v${PYINSTALLER_VER}" https://github.com/pyinstaller/pyinstaller.git
##     ## could not get it or waf to work well, so simple solution of 2-3 days of trying, create a dummy executable /opt/freeware/bin/strip file which does nothing
##     - echo '#!/opt/csw/bin/bash' > /opt/csw/bin/strip
##     - echo "# dummy" >> /opt/csw/bin/strip
##     - chmod 755 /opt/csw/bin/strip
##     - chown root:bin /opt/csw/bin/strip
##     - cd pyinstaller/bootloader/src
##     - patch -N < solaris10_pyinst_global_55.patch
##     - patch -N < solaris10_pyinst_utils_55.patch
##     - cd ..
##     - python3 ./waf configure all --gcc --target-arch=32bit
##     - cd ..
##     - export PYINSTALLER_DIR=$(pwd)
##     - python3 setup.py install
##     - cd ${oldpwd}
##     ## Build zeromq for Solaris 10
##     - rm -fR dev_zeromq
##     - mkdir dev_zeromq
##     - mv zeromq-${CICD_ZEROMQ_VER}.tar.gz dev_zeromq/
##     - cd dev_zeromq
##     ## Solaris 10 is old and ssh has issues, using provided version of zeromq
##     ## Intel - wget https://github.com/zeromq/libzmq/releases/download/v${CICD_ZEROMQ_VER}/zeromq-${CICD_ZEROMQ_VER}.tar.gz  --secure-protocol=TLSv1_2
##     ## SPARC - wget --no-check-certificate https://github.com/zeromq/libzmq/releases/download/v${CICD_ZEROMQ_VER}/zeromq-${CICD_ZEROMQ_VER}.tar.gz  --secure-protocol=TLSv1_2
##     ## - wget --no-check-certificate https://github.com/zeromq/libzmq/releases/download/v${CICD_ZEROMQ_VER}/zeromq-${CICD_ZEROMQ_VER}.tar.gz  --secure-protocol=TLSv1_2
##     - tar -xvzf zeromq-${CICD_ZEROMQ_VER}.tar.gz
##     ## allow for tar giving id 1000 which isn't even valid on the system :shrug:
##     - chown root:root zeromq-${CICD_ZEROMQ_VER}
##     - cd zeromq-${CICD_ZEROMQ_VER}
##     - ./configure
##     - gmake
##     - gmake install
##     - cd ${oldpwd}
##     - python3 -m pip install tiamat==7.10.7
##     # build Salt
##     - export CICD_SALT_DATE=$(date +"%a %b %0d %Y")
##     - export CICD_SALT_TAG=$(echo "${CI_COMMIT_TAG}" | cut -d '-' -f 1)
##     - export CICD_SALT_VERSION=$(echo "${CI_COMMIT_TAG}" | sed s/v// | cut -d '-' -f 1)
##     - export CICD_SALT_RELEASE=$(echo "${CI_COMMIT_TAG}" | sed s/v// | cut -d '-' -f 2)
##     - cd ${oldpwd}
##     - rm -fR dev_salt
##     - mkdir dev_salt
##     - cd dev_salt
##      ## Currently http still works, https has issues due to age with GitHub for Salt
##      ## git clone -b ${CICD_SALT_DEV_BRANCH} https://github.com/saltstack/salt.git
##     - git clone -b ${CICD_SALT_DEV_BRANCH} http://github.com/saltstack/salt.git
##     - cd salt
##     - python3 setup.py -q sdist
##     - cd dist
##     - export CICD_SALT_TAR_GZ_NAME=$(ls salt-*)
##     - export CICD_SALT_LOCATION=$(pwd)/${CICD_SALT_TAR_GZ_NAME}
##     - cd ${oldpwd}
##     ## ensure if no release number given default to 1
##     - if [[ "${CICD_SALT_VERSION}" = "${CICD_SALT_RELEASE}" ]]; then export CICD_SALT_RELEASE=1; fi
##     ## - export CICD_SALT_LOCATION="git+https://github.com/saltstack/salt@${CICD_SALT_TAG}#egg=salt"
##     - echo "$CICD_SALT_TAG"
##     - echo "$CICD_SALT_VERSION"
##     - echo "$CICD_SALT_RELEASE"
##     - echo "$CICD_SALT_LOCATION"
##     - cd ${oldpwd}
##     - rm -f solaris10_requirements.txt
##     - cp requirements.txt solaris10_requirements.txt
##     - sed -i 's&SALT_LOCATION&'"$CICD_SALT_LOCATION"'&' solaris10_requirements.txt
##     - cat solaris10_requirements.txt
##     - cd ${oldpwd}
##     ## now build
##     - sed -i 's&PYINSTALLER_LOCATION&'${PYINSTALLER_DIR}'&' build.conf
##     - cat build.conf
##     - tiamat build -c build.conf
##     - find dist -name __pycache__ | xargs rm -fR
##     - find dist -name "*.pyc" | xargs rm -f
##     - find dist -name "*.pyo" | xargs rm -f
##     - rm -f dist/run/setuptools/command/"launcher manifest.xml"
##     - rm -f dist/run/setuptools/"script (dev).tmpl"
##     - rm -f dist/run/setuptools/text/"Lorem ipsum.txt"
##     ## NOW TO PACKAGE IT
##     - cd ${oldpwd}
##     - rm -fR dev_pkg
##     - mkdir dev_pkg
##     ## ensure no user owning files but root which is used to build
##     - chown -R root:root *
##     - mkdir -p dev_pkg/opt/saltstack/salt
##     - chown root:sys dev_pkg/opt
##     - mkdir -p dev_pkg/opt/saltstack/salt/config.dist
##     - mkdir -p dev_pkg/opt/local/etc/salt
##     - mkdir -p dev_pkg/opt/local/etc/salt/minion.d
##     - mkdir -p dev_pkg/opt/local/etc/salt/pki/minion
##     - cp -a ${oldpwd}/dist/run dev_pkg/opt/saltstack/salt/
##     # keep copy in /opt/saltstack/salt in case install into sparse zone where /usr is read-only
##     - cp -a ${oldpwd}/salt-minion ${oldpwd}/salt-call dev_pkg/opt/saltstack/salt/
##     - cp -a dev_salt/salt/pkg/solaris/salt-minion.xml dev_pkg/opt/saltstack/salt/config.dist/salt-minion-zone.xml
##     - cp -a dev_salt/salt/pkg/solaris/salt-minion.xml dev_pkg/opt/saltstack/salt/config.dist/salt-minion-global.xml
##     - cp -a dev_salt/salt/conf/minion dev_pkg/opt/local/etc/salt/
##     ## remove x permission otherwise errors due to no python version specified
##     - chmod 644 dev_pkg/opt/saltstack/salt/run/pip/_vendor/appdirs.py
##     - chmod 644 dev_pkg/opt/saltstack/salt/run/pip/_vendor/chardet/cli/chardetect.py
##     - chmod 644 dev_pkg/opt/saltstack/salt/run/pip/_vendor/requests/certs.py
##     - chmod 644 dev_pkg/opt/saltstack/salt/run/pkg_resources/_vendor/appdirs.py
##     ## cleanup dev_salt save space
##     ## - rm -fR dev_salt
##     - perl -pi -e 's/\/opt\/local\/bin/\/usr\/bin/' dev_pkg/opt/saltstack/salt/config.dist/salt-minion-global.xml
##     - perl -pi -e 's/\/etc\/salt/\/opt\/local\/etc\/salt/' dev_pkg/opt/saltstack/salt/config.dist/salt-minion-global.xml
##     - perl -pi -e 's/\/opt\/local\/bin/\/opt\/saltstack\/salt/' dev_pkg/opt/saltstack/salt/config.dist/salt-minion-zone.xml
##     - perl -pi -e 's/\/etc\/salt/\/opt\/local\/etc\/salt/' dev_pkg/opt/saltstack/salt/config.dist/salt-minion-zone.xml
##     ## --- WARNING HERE BE DRAGONS ---
##     ## This is where I left off in the package creation process
##     ## The goal was to use chrpath to ensure that every .so in the Salt package
##     ## would look first in the /opt/saltstack/salt/run hierarchy for libraries
##     ##
##     ## there is a problem with using chrpath in Solaris Upd 8, as the elf dynamic string table
##     ## can only reduce runpath/rpath sizes.  Later versions of the elf dynamic string table
##     ## have an extra 0x200 bytes to allow for larger runpaths, /usr/include/sys/link.h DT_SUNW_STRPAD
##     ## hence work-around is to use symbolic links fitting inside existing runpath '/opt/csw/lib:/opt/local/lib'
##     ## noting that a large number of *.so files runpath or rpath is '/opt/csw/lib'
##     ##
##     ## using OPT_SALT_PATH='tiamat' which is a symbolic link to /opt/saltstack/salt/run directory (a little advertizing)
##     ##
##     - cd ${oldpwd}/dev_pkg
##     - find opt/saltstack/salt/run -name \*.so -exec chrpath -r "/${OPT_SALT_PATH}" {} \;
##     - find opt/saltstack/salt/run -name \*.so\.* -exec chrpath -r "/${OPT_SALT_PATH}" {} \;
##     - cp -a opt /
##     - cd ${oldpwd}
##     - rm -fR /tmp/pkgbuild
##     - mkdir -p /tmp/pkgbuild
##     - echo "/opt" > /tmp/pkgbuild/files
##     - echo "/opt/local" >> /tmp/pkgbuild/files
##     - echo "/opt/local/etc" >> /tmp/pkgbuild/files
##     - find /opt/saltstack -print >> /tmp/pkgbuild/files
##     - find /opt/local/etc/salt -print >> /tmp/pkgbuild/files
##     - echo "i pkginfo" > /tmp/pkgbuild/Prototype
##     - echo "i postinstall" >> /tmp/pkgbuild/Prototype
##     - cat /tmp/pkgbuild/files | pkgproto >> /tmp/pkgbuild/Prototype
##     # Create pkginfo and postinstall as needed -- set correct version number, architecture, etc.
##     - PKG_ARCH=
##     - PKG_SUFFIX=
##     - if [[ $(uname -m) = 'i86pc' ]];then PKG_ARCH='i386'; PKG_SUFFIX='x86'; else PKG_ARCH='sun4u'; PKG_SUFFIX='sparc'; fi
##     - CURR_DATE=$(date '+%d%h%Y')
##     - cp solaris10_pkginfo pkginfo
##     - sed -i 's&SALT_CURR_DATE&'"${CURR_DATE}"'&' pkginfo
##     - sed -i 's&SALT_CURR_VERSION&'"${CICD_SALT_VERSION}"'&' pkginfo
##     - sed -i 's&SALT_PKG_ARCH&'"${PKG_ARCH}"'&' pkginfo
##     - cat pkginfo
##     - cp pkginfo /tmp/pkgbuild/
##     - cp solaris10_postinstall postinstall
##     - sed -i 's&SALT_ROOT_SHORT_PATH&'"$OPT_SALT_PATH"'&' postinstall
##     - cat postinstall
##     ## now build the Solaris 10 package with everything set up
##     - cp postinstall /tmp/pkgbuild
##     - cd /tmp/pkgbuild
##     - pkgmk -o -r / -d /tmp/pkgbuild -f Prototype
##     # once the package is built, clean up files before creating tarball
##     ## rm -f Prototype files postinstall pkginfo
##     - rm -f ${oldpwd}/Prototype ${oldpwd}/files ${oldpwd}/postinstall ${oldpwd}/pkginfo
##     - mv  Prototype ${oldpwd}/Prototype_lastbld
##     - mv  files ${oldpwd}/files_lastbld
##     - mv  postinstall ${oldpwd}/postinstall_lastbld
##     - mv  pkginfo ${oldpwd}/pkginfo_lastbld
##     ## tar it up, ensure use Solaris tar rather than gnu, otherwise Longlink errors
##     ## if compress gnu and expand with Solaris
##     - rm -f "${oldpwd}/salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar"
##     - rm -f "${oldpwd}/salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz"
##     - /usr/sbin/tar -cvf "$oldpwd/salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar" .
##     - gzip "${oldpwd}/salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar"
##     - cd ${oldpwd}
##     - ls -alh *.tar*
##     ## - echo "cmd is curl -n -X PUT https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz -T ${oldpwd}/salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz"
##     ## - curl -n -X PUT "https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz" -T "${oldpwd}/salt-${CICD_SALT_VERSION}-${CICD_SALT_RELEASE}-solaris-${PKG_SUFFIX}.tar.gz"
##     - echo "dog done" > trigger_file_done
##     - ls -alh
##
##   rules:
##     - if: "$CI_COMMIT_TAG != null && $CI_PROJECT_PATH == $CICD_UPSTREAM_PATH"
##       when: always
##     - when: never

## TBD need a new location to store and retrieve intermediate build product
## test-solaris10:
##   stage: test_pkg
##   artifacts:
##     name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
##     expire_in: 120 days
##   needs: [ "build-solaris10" ]
##   tags:
##     - solaris10
##   script:
##     - oldpwd=$(pwd)
##     - export PATH=/opt/local/bin:/opt/csw/bin:/opt/csw/sbin:/opt/csw/gnu:/usr/sbin:/usr/bin:/usr/sfw/bin:/usr/ccs/bin
##     - date
##     - svcadm disable svc:/network/ntp:default
##     - ntpdate -s time.nist.gov
##     - date
##     - pkgutil -y -i curl wget
##     - rm -fR test
##     - mkdir test
##     - cd test
##     - PKG_SUFFIX=''
##     - if [[ $(uname -m) = 'i86pc' ]];then PKG_SUFFIX='x86'; else PKG_SUFFIX='sparc'; fi
##     - echo "cmd is wget -r -nd --no-parent -A salt-*-solaris-${PKG_SUFFIX}.tar.gz https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/"
##     - wget -r -nd --no-parent -A "salt-*-solaris-${PKG_SUFFIX}.tar.gz" "https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/"
##     - ls -alh
##     - SALT_FILE_NAME_TAR_GZ=$(ls)
##     - gunzip --decompress ${SALT_FILE_NAME_TAR_GZ}
##     - SALT_FILE_NAME_TAR=$(ls)
##     - /usr/bin/tar -xvf ${SALT_FILE_NAME_TAR}
##     - /usr/sbin/pkgadd -a ${oldpwd}/pkgadd_admin -d . salt
##     - salt-call --local test.versions
##     - salt-call --local grains.items
##
##   rules:
##     - if: $CI_COMMIT_TAG
##       when: never
##     - when: on_success


## test-solaris10-sparc:
##   stage: test_pkg
##   artifacts:
##     name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
##     expire_in: 120 days
##   needs: [ "build-solaris10" ]
##   tags:
##     - solaris10-sparc
##   script:
##     - oldpwd=$(pwd)
##     - export PATH=/opt/local/bin:/opt/csw/bin:/opt/csw/sbin:/opt/csw/gnu:/usr/sbin:/usr/bin:/usr/sfw/bin:/usr/ccs/bin
##     - date
##     - svcadm disable svc:/network/ntp:default
##     - ntpdate -s time.nist.gov
##     - date
##     - pkgutil -y -i curl wget
##     - rm -fR test
##     - mkdir test
##     - cd test
##     - PKG_SUFFIX=''
##     - if [[ $(uname -m) = 'i86pc' ]];then PKG_SUFFIX='x86'; else PKG_SUFFIX='sparc'; fi
##     - echo "cmd is wget -r -nd --no-parent -A salt-*-solaris-${PKG_SUFFIX}.tar.gz https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/"
##     - wget -r -nd --no-parent -A "salt-*-solaris-${PKG_SUFFIX}.tar.gz" "https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/"
##     - ls -alh
##     - SALT_FILE_NAME_TAR_GZ=$(ls)
##     - gunzip --decompress ${SALT_FILE_NAME_TAR_GZ}
##     - SALT_FILE_NAME_TAR=$(ls)
##     - /usr/bin/tar -xvf ${SALT_FILE_NAME_TAR}
##     - /usr/sbin/pkgadd -a ${oldpwd}/pkgadd_admin -d . salt
##     - salt-call --local test.versions
##     - salt-call --local grains.items
##
##   rules:
##     - if: $CI_COMMIT_TAG
##       when: never
##     - when: on_success


## TBD need a new location to store and retrieve intermediate build product
## test-tags-solaris10:
##   stage: test_pkg
##   artifacts:
##     name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
##     expire_in: 120 days
##   needs: [ "build-tags-solaris10" ]
##   tags:
##     - solaris10
##   script:
##     - oldpwd=$(pwd)
##     - export PATH=/opt/local/bin:/opt/csw/bin:/opt/csw/sbin:/opt/csw/gnu:/usr/sbin:/usr/bin:/usr/sfw/bin:/usr/ccs/bin
##     - date
##     - svcadm disable svc:/network/ntp:default
##     - ntpdate -s time.nist.gov
##     - date
##     - rm -fR test
##     - mkdir test
##     - cd test
##     - PKG_SUFFIX=''
##     - if [[ $(uname -m) = 'i86pc']];then PKG_SUFFIX='x86'; else PKG_SUFFIX='sparc'; fi
##     - echo "cmd is wget -r -nd --no-parent -A salt-*-solaris-${PKG_SUFFIX}.tar.gz https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/"
##     - wget -r -nd --no-parent -A "salt-*-solaris-${PKG_SUFFIX}.tar.gz" "https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/"
##     - ls -alh
##     - SALT_FILE_NAME_TAR_GZ=$(ls)
##     - gunzip --decompress ${SALT_FILE_NAME_TAR_GZ}
##     - SALT_FILE_NAME_TAR=$(ls)
##     - /usr/bin/tar -xvf ${SALT_FILE_NAME_TAR}
##     - /usr/sbin/pkgadd -a ${oldpwd}/pkgadd_admin -d . salt
##     - salt-call --local test.versions
##     - salt-call --local grains.items
##
##   rules:
##     - if: "$CI_COMMIT_TAG != null && $CI_PROJECT_PATH == $CICD_UPSTREAM_PATH"
##       when: always
##     - when: never


## test-tags-solaris10-sparc:
##   stage: test_pkg
##   artifacts:
##     name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
##     expire_in: 120 days
##   needs: [ "build-tags-solaris10" ]
##   tags:
##     - solaris10-sparc
##   script:
##     - oldpwd=$(pwd)
##     - export PATH=/opt/local/bin:/opt/csw/bin:/opt/csw/sbin:/opt/csw/gnu:/usr/sbin:/usr/bin:/usr/sfw/bin:/usr/ccs/bin
##     - date
##     - svcadm disable svc:/network/ntp:default
##     - ntpdate -s time.nist.gov
##     - date
##     - rm -fR test
##     - mkdir test
##     - cd test
##     - PKG_SUFFIX=''
##     - if [[ $(uname -m) = 'i86pc']];then PKG_SUFFIX='x86'; else PKG_SUFFIX='sparc'; fi
##     - echo "cmd is wget -r -nd --no-parent -A salt-*-solaris-${PKG_SUFFIX}.tar.gz https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/"
##     - wget -r -nd --no-parent -A "salt-*-solaris-${PKG_SUFFIX}.tar.gz" "https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/"
##     - ls -alh
##     - SALT_FILE_NAME_TAR_GZ=$(ls)
##     - gunzip --decompress ${SALT_FILE_NAME_TAR_GZ}
##     - SALT_FILE_NAME_TAR=$(ls)
##     - /usr/bin/tar -xvf ${SALT_FILE_NAME_TAR}
##     - /usr/sbin/pkgadd -a ${oldpwd}/pkgadd_admin -d . salt
##     - salt-call --local test.versions
##     - salt-call --local grains.items
##
##   rules:
##     - if: "$CI_COMMIT_TAG != null && $CI_PROJECT_PATH == $CICD_UPSTREAM_PATH"
##       when: always
##     - when: never


## TBD need a new location to store and retrieve intermediate build product
## upload-tags-solaris10:
##   stage: upload
##   artifacts:
##     name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
##     expire_in: 120 days
##   needs: [ "build-tags-solaris10" ]
##   tags:
##     - solaris10
##   script:
##     - oldpwd=$(pwd)
##     - export PATH=/opt/local/bin:/opt/csw/bin:/opt/csw/sbin:/opt/csw/gnu:/usr/sbin:/usr/bin:/usr/sfw/bin:/usr/ccs/bin
##     - date
##     - svcadm disable svc:/network/ntp:default
##     - ntpdate -s time.nist.gov
##     - date
##     - rm -fR test
##     - mkdir test
##     - cd test
##     - PKG_SUFFIX=''
##     - if [[ $(uname -m) = 'i86pc']];then PKG_SUFFIX='x86'; else PKG_SUFFIX='sparc'; fi
##     - echo "cmd is wget -r -nd --no-parent -A salt-*-solaris-${PKG_SUFFIX}.tar.gz https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/"
##     - wget -r -nd --no-parent -A "salt-*-solaris-${PKG_SUFFIX}.tar.gz" "https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/"
##     - ls -alh
##     - SALT_FILE_NAME_TAR_GZ=$(ls)
##     ## - extract the SALT VERISON from salt-3001.2-solaris-x86.tag.gz
##     - SALT_VERSION=$(echo "${SALT_FILE_NAME_TAR_GZ}" | cut -d '-' -f 2)
##     - SALT_VERSION_TAG=$(echo "${CI_COMMIT_TAG}" | sed s/v// | cut -d '-' -f 1)
##     - SALT_RELEASE_TAG=$(echo "${CI_COMMIT_TAG}" | sed s/v// | cut -d '-' -f 2)
##     - if [[ "${SALT_VERSION}" = "${SALT_VERSION_TAG}" ]];then echo "tag version of SALT '${SALT_VERSION_TAG}' does not match file version '${SALT_VERSION}' from tar gz file '${SALT_VERSION}'"; exit 1; fi
##     - echo "cmd is curl -n -X PUT https://artifactory.saltstack.net/artifactory/enterprise-staging/solaris/10/${PKG_SUFFIX}/archive/${SALT_VERSION}/${SALT_FILE_NAME_TAR_GZ} -T ${oldpwd}/${SALT_FILE_NAME_TAR_GZ}"
##     - curl -n -X PUT "https://artifactory.saltstack.net/artifactory/enterprise-staging/solaris/10/${PKG_SUFFIX}/archive/${SALT_VERSION_TAG}/${SALT_FILE_NAME_TAR_GZ}" -T "${oldpwd}/${SALT_FILE_NAME_TAR_GZ}"
##
##   rules:
##     - if: "$CI_COMMIT_TAG != null && $CI_PROJECT_PATH == $CICD_UPSTREAM_PATH"
##       when: always
##     - when: never


## upload-tags-solaris10-sparc:
##   stage: upload
##   artifacts:
##     name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
##     expire_in: 120 days
##   needs: [ "build-tags-solaris10" ]
##   tags:
##     - solaris10-sparc
##   script:
##     - oldpwd=$(pwd)
##     - export PATH=/opt/local/bin:/opt/csw/bin:/opt/csw/sbin:/opt/csw/gnu:/usr/sbin:/usr/bin:/usr/sfw/bin:/usr/ccs/bin
##     - date
##     - svcadm disable svc:/network/ntp:default
##     - ntpdate -s time.nist.gov
##     - date
##     - rm -fR test
##     - mkdir test
##     - cd test
##     - PKG_SUFFIX=''
##     - if [[ $(uname -m) = 'i86pc']];then PKG_SUFFIX='x86'; else PKG_SUFFIX='sparc'; fi
##     - echo "cmd is wget -r -nd --no-parent -A salt-*-solaris-${PKG_SUFFIX}.tar.gz https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/"
##     - wget -r -nd --no-parent -A "salt-*-solaris-${PKG_SUFFIX}.tar.gz" "https://artifactory.saltstack.net/artifactory/native-minion-artifacts/${CI_PIPELINE_ID}/"
##     - ls -alh
##     - SALT_FILE_NAME_TAR_GZ=$(ls)
##     ## - extract the SALT VERISON from salt-3001.2-solaris-x86.tag.gz
##     - SALT_VERSION=$(echo "${SALT_FILE_NAME_TAR_GZ}" | cut -d '-' -f 2)
##     - SALT_VERSION_TAG=$(echo "${CI_COMMIT_TAG}" | sed s/v// | cut -d '-' -f 1)
##     - SALT_RELEASE_TAG=$(echo "${CI_COMMIT_TAG}" | sed s/v// | cut -d '-' -f 2)
##     - if [[ "${SALT_VERSION}" = "${SALT_VERSION_TAG}" ]];then echo "tag version of SALT '${SALT_VERSION_TAG}' does not match file version '${SALT_VERSION}' from tar gz file '${SALT_VERSION}'"; exit 1; fi
##     - echo "cmd is curl -n -X PUT https://artifactory.saltstack.net/artifactory/enterprise-staging/solaris/10/${PKG_SUFFIX}/archive/${SALT_VERSION}/${SALT_FILE_NAME_TAR_GZ} -T ${oldpwd}/${SALT_FILE_NAME_TAR_GZ}"
##     - curl -n -X PUT "https://artifactory.saltstack.net/artifactory/enterprise-staging/solaris/10/${PKG_SUFFIX}/archive/${SALT_VERSION_TAG}/${SALT_FILE_NAME_TAR_GZ}" -T "${oldpwd}/${SALT_FILE_NAME_TAR_GZ}"
##
##   rules:
##     - if: "$CI_COMMIT_TAG != null && $CI_PROJECT_PATH == $CICD_UPSTREAM_PATH"
##       when: always
##     - when: never
##
